# -*- coding: utf-8 -*-
"""helper_functions_food_image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119iP6McBopGt3xDTvbyYUuMKzO177T9L
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import random

def view_random_image(target_dir, target_class):
    target_folder = target_dir + target_class
    random_image = random.sample(os.listdir(target_folder), 1)
    img = mpimg.imread(target_folder + "/" + random_image[0])

    # Plot the image
    plt.imshow(img)
    plt.title(target_class)
    plt.axis("off")

    # Show the image
    plt.show()

    print(f"Image shape: {img.shape}")
    #return img

#plot the validation and training curve here...
def plot_loss_curves(history):
  loss = history.history["loss"]
  val_loss = history.history["val_loss"]

  accuracy = history.history["accuracy"]
  val_accuracy = history.history["val_accuracy"]

  epochs = range(len(history.history["loss"]))

  #plot loss
  plt.plot(epochs,loss,label="training_loss")
  plt.plot(epochs,val_loss,label="val_loss")
  plt.title("Loss")
  plt.xlabel("epochs")
  plt.legend()

  #accuracy
  plt.figure()
  plt.plot(epochs,accuracy,label="training_accuracy")
  plt.plot(epochs,val_accuracy,label="val_accuracy")
  plt.title("Accuracy")
  plt.xlabel("epochs")
  plt.legend()

def load_and_predict(filename,image_shape=224):
  """
  Reads an image for us from the given filename and turns it into
  appropriate tensor show of 224,224,3 which is becuase our
  deep learning models are trained upon images of this shape
  """
  img = tf.io.read_file(filename)
  img = tf.image.decode_image(img)
  img = tf.image.resize(img,size=[image_shape,image_shape])
  img = img/255. ## making it also between 0 and 1
  return img





